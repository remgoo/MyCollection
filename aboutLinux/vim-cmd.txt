vi/vim基本使用方法（vi）（vim）（使用方法）

一、如果在终端中开没有打开vim，可以：
横向分割显示：
$ vim -o filename1 filename2  
纵向分割显示：
$ vim -O filename1 filename2

二、如果已经用vim打开了一个文件，想要在窗口中同时再打开另一个文件：
横向分割显示：
:vs filename
纵向分割显示：
:sp filename
其中，vs可以用vsplit替换，sp可以用split替换。如果finename不存在，则会新建该文件并打开。

也可以使用 ctrl + 两次按 w 或者ctrl + w 然后按上下键在上下窗口间切换。

vi多文件时，文件之间的拷贝复制只能通过命名缓存进行
如
"a3yy    把3行内容复制到命名为a的缓冲区
"ap       把名字为a的缓冲区内容拷贝到当前位置 （此时不是输入冒号，而是输入“） 


vim提供的移动方式多如牛毛，但我们并不需要掌握全部这些命令，只需要掌握最适合自己的那些命令。
因为我们最终的目的，并不是成为一个vim高手，而是更高效的编辑文本。
我们下面介绍的命令，如果没有特别说明，都是在Normal模式下使用的命令。
这些命令的帮助入口，就是”:help 命令名“。例如，对于”j“命令，查看它的帮助，使用”:help j“。

h, j, k, l分别代表向左、下、上、右移动。如同许多vim命令一样，可以在这些键前加一个数字，表示移动的倍数。
例如，”10j“表示向下移动10行；”10l“表示向右移动10列。


命令”G“前可以加上数字，在这里，数字的含义并不是倍数，而是你打算跳转的行号。例如，你想跳转到文件的第1234行，只需输入”1234G“。
你还可以按百分比来跳转，例如，你想跳到文件的正中间，输入”50%“；如果想跳到75%处，输入”75%“。注意，你必须先输入一个数字，然后输入”%“。如果直接输入”%“，那含义就完全不同了。”:help N%“阅读更多细节。

移动和滚动
直接按w/b来按单词滚动，w是向前移动一个单词，b是向后移动一个单词，我居然不常用！亏我还常常dw的来删除词。
另外，Ctrl+D向下滚屏，Ctrl+U向上滚屏，比我之前hjkl(左下右上)的有效率多了……汗


（2）如何与linux交互
在命令模式可以！ls查看当前目录下的东东,其他命令类似，可能有些不能用，我一般常用的就是ls

（3）undo和redo
u——回撤上一操作
ctrl+r——跟u相反，有时你undo一下，又发现u错了，想回来，那就redo吧

（4）分屏、多屏操作
sp——横分屏
vsp——竖分屏
（5）vim补全
ctrl+p

（6）查找当前所处位置单词
直接*完事，然后n下一个匹配位置，N上一个匹配位置

（7）vim全局替换
%s/要替换的内容/要替换成的内容/g

vim范围(10,20行)替换
10,20s/要替换的内容/要替换成的内容/g

（1）剪切(:mo)5到10行，放到13行之下
:5,10 mo 13   第三个mo为字母，代表move的意思
:10 mo 13   剪切第10行放到13行之，下第三个m为字母代表move的意思

（2）多行删除1,10行 ，
：1,10d

（3）光标移动
下一行行首：+ 
上一行行首：- 
当前行行首：0 

（8）其余
set nu——显示行号
set nonu——隐藏行号
set list——显示空格、tab等符号（set nolist）
set wrap——自动折叠
zo——展开
zc——收拢（指的是函数之类的）
***********************************************
摘要：
    在minicom终端里修改开发板中的文件时，必须要用到vi，因为开发板中并不像开发主机那样，有gedit和kscope这样的编辑器；还有，即便是在开发主机上，也会经常用到vi，因为vi使用起来会比较的方便。但是vi对于初学者来说，还是会感觉到入门困难，因为它是基于命令行的，所有的编辑都是基于命令行来操作的，如果用得不多会不太记得，因此特将这些命令转载过来，在需要的时候可以查阅。

介绍：
    原文摘要：本文介绍了vi (vim)的基本使用方法，但对于普通用户来说基本上够了！vi/vim的区别简单点来说，它们都是多模式编辑器，不同的是vim 是vi的升级版本，它不仅兼容vi的所有指令，而且还有一些新的特性在里面。例如语法加亮，可视化操作不仅可以在终端运行，也可以运行于x window、 mac os、 windows。

    vi编辑器是所有Unix及Linux系统下标准的编辑器，它的强大不逊色于任何最新的文本编辑器，这里只是简单地介绍一下它的用法和一小部分指令。由于对Unix及 Linux系统的任何版本，vi编辑器是完全相同的，因此您可以在其他任何介绍vi的地方进一步了解它。Vi也是Linux中最基本的文本编辑器，学会它后，您将在Linux的世界里畅行无阻。
    [简单地，可以使用上下左右方向箭头和delete，backspace键来进行位置移动和删除，不管是命令模式还是插入模式]

1、vi的基本概念
    基本上vi可以分为三种状态，分别是命令模式（command mode）、插入模式（Insert mode）和底行模式（last line mode），各模式的功能区分如下：
    1) 命令行模式command mode）
        控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode。
    2) 插入模式（Insert mode）
        只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。
    3) 底行模式（last line mode）
        将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号……等。

       不过一般我们在使用时把vi简化成两个模式，就是将底行模式（last line mode）也算入命令行模式command mode）。

2、vi的基本操作
    a) 进入vi
       在系统提示符号输入vi及文件名称后，就进入vi全屏幕编辑画面：$ vi myfile。不过有一点要特别注意，就是您进入vi之后，是处于「命令行模式（command mode）」，您要切换到「插入模式（Insert mode）」才能够输入文字。初次使用vi的人都会想先用上下左右键移动光标，结果电脑一直哔哔叫，把自己气个半死，所以进入vi后，先不要乱动，转换到「插入模式（Insert mode）」再说吧！

    b) 切换至插入模式（Insert mode）编辑文件
        在「命令行模式（command mode）」下按一下字母「i」就可以进入「插入模式（Insert mode）」，这时候你就可以开始输入文字了。

    c) Insert 的切换
       您目前处于「插入模式（Insert mode）」，您就只能一直输入文字，如果您发现输错了字！想用光标键往回移动，将该字删除，就要先按一下「ESC」键转到「命令行模式（command mode）」再删除文字。

    d) 退出vi及保存文件
       在「命令行模式（command mode）」下，按一下「：」冒号键进入「Last line mode」，例如：
       :w filename （输入 「w filename」将文章以指定的文件名filename保存）
       :wq (输入「wq」，存盘并退出vi)
       :q! (输入q!， 不存盘强制退出vi)

3、命令行模式（command mode）功能键
    1）. 插入模式
       按「i」切换进入插入模式「insert mode」，按“i”进入插入模式后是从光标当前位置开始输入文件；
       按「a」进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字；
       按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。

    2）. 从插入模式切换为命令行模式
      按「ESC」键。

    3）. 移动光标
      vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。
      按「ctrl」+「b」：屏幕往“后”移动一页。
      按「ctrl」+「f」：屏幕往“前”移动一页。
      按「ctrl」+「u」：屏幕往“后”移动半页。
      按「ctrl」+「d」：屏幕往“前”移动半页。
      按数字「0」：移到文章的开头。
      按「G」：移动到文章的最后。
      按「$」：移动到光标所在行的“行尾”。
      按「^」：移动到光标所在行的“行首”
      按「w」：光标跳到下个字的开头
      按「e」：光标跳到下个字的字尾
      按「b」：光标回到上个字的开头
      按「#l」：光标移到该行的第#个位置，如：5l,56l。
z.                              // 把当前行移动到屏幕中央，不用回车，切记
z-                             // 把当前行移动到屏幕底部，同上，不用回车
当前屏幕首行：H
当前屏幕末行：L
当前屏幕中央：M
当前行的第一个非空白字符：^   //shift上档 '6'
当前行行尾：$          //shift上档 '4'
下一行行首：+         //shift键切换到上档 '+'
上一行行首：-         //-
当前行行首：0        //0
后一个单词词首：w,W // w：将光标右移一个字。光标停留在下一个字的字首位置
后一个单词词尾：e,E // e：把光标移至当前所在字的最后一个字符位置
前一个单词词首：b,B //b:将光标左移一个字。光标停留在下一个字的字首位置



    4）. 删除文字（也是剪切）
       「x」：每按一次，删除光标所在位置的“后面”一个字符。
       「#x」：例如，「6x」表示删除光标所在位置的“后面”6个字符。
       「X」：大写的X，每按一次，删除光标所在位置的“前面”一个字符。
       「#X」：例如，「20X」表示删除光标所在位置的“前面”20个字符。
       「dd」：剪切光标所在行。
       「#dd」：从光标所在行开始删除#行

    5）. 复制
       「yw」：将光标所在之处到字尾的字符复制到缓冲区中。
       「#yw」：复制#个字到缓冲区
       「yy」：复制光标所在行到缓冲区。
       「#yy」：例如，「6yy」表示拷贝从光标所在的该行“往下数”6行文字。
       「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与“y”有关的复制命令都必须与“p”配合才能完成复制与粘贴功能。

p(小写）  粘贴，  粘贴位置为光标所在行的下一行
P（大写）  粘贴，  粘贴位置为光标所在行的上一行

    6）. 替换
       「r」：替换光标所在处的字符。
       「R」：替换光标所到之处的字符，直到按下「ESC」键为止。

    7）. 回复上一次操作
       「u」：如果您误执行一个命令，可以马上按下「u」，回到上一个操作。按多次“u”可以执行多次回复。

    8）. 更改
       「cw」：更改光标所在处的字到字尾处
       「c#w」：例如，「c3w」表示更改3个字

    9）. 跳至指定的行
       「ctrl」+「g」列出光标所在行的行号。
       「#G」：例如，「15G」，表示移动光标至文章的第15行行首。

4、Last line mode下命令简介
　　在使用「last line mode」之前，请记住先按「ESC」键确定您已经处于「command mode」下后，再按「：」冒号即可进入「last line mode」。

    A) 列出行号
       「set nu」：输入「set nu」后，会在文件中的每一行前面列出行号。

    B) 跳到文件中的某一行
      「#」：「#」号表示一个数字，在冒号后输入一个数字，再按回车键就会跳到该行了，如输入数字15，再回车，就会跳到文章的第15行。

    C) 查找字符
      「/关键字」：先按「/」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往后寻找到您要的关键字为止。
      「?关键字」：先按「?」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往前寻找到您要的关键字为止。

    D) 保存文件
      「w」：在冒号输入字母「w」就可以将文件保存起来。

    E) 离开vi
      「q」：按「q」就是退出，如果无法离开vi，可以在「q」后跟一个「!」强制离开vi。
      「qw」：一般建议离开时，搭配「w」一起使用，这样在退出的时候还可以保存文件。

5、vi命令列表
    1) 下表列出命令模式下的一些键的功能：
       h左移光标一个字符
       l右移光标一个字符
       k光标上移一行
       j光标下移一行
       ^光标移动至行首
       0数字“0”，光标移至文章的开头
       G光标移至文章的最后
       $光标移动至行尾
       f向前翻屏
       Ctrl+b向后翻屏
       Ctrl+d向前翻半屏
       Ctrl+u向后翻半屏
       i在光标位置前插入字符
       a在光标所在位置的后一个字符开始增加
       o插入新的一行，从行首开始输入
       ESC从输入状态退至命令状态
       x删除光标后面的字符
       #x删除光标后的＃个字符
       X(大写X)，删除光标前面的字符
       #X删除光标前面的#个字符
       dd删除光标所在的行
       #dd删除从光标所在行数的#行
       yw复制光标所在位置的一个字
       #yw复制光标所在位置的#个字
       yy复制光标所在位置的一行
       #yy复制从光标所在行数的#行
       p粘贴
       u取消操作
       Ctrl+R可以恢复对使用u命令的操作
       cw更改光标所在位置的一个字
       #cw更改光标所在位置的#个字

    2) 下表列出行命令模式下的一些指令
       w filename储存正在编辑的文件为filename
       wq filename储存正在编辑的文件为filename，并退出vi
       q!放弃所有修改，退出vi
       set nu显示行号
       /或?查找，在/后输入要查找的内容
       n与/或?一起使用，如果查找的内容不是想要找的关键字，按n或向后（与/联用）或向前（与?联用）继续查找，直到找到为止。

    附件里有一个高手总结的图，vim的命令，可将它打印出来，放到电脑旁，忘记了就看一下，很方便，呵呵。



一个高手总结的图，vim的脑旁，，呵呵。
脑旁，，呵呵。总结的图，vim的脑旁，，呵呵。总结的图，vim的脑旁，，呵呵。总结的图，vim的脑旁，，呵呵。m的脑旁，，呵呵。


如何选择一个单词,它的作用是选取一个单词（word），无论光标在这个单词的哪个位置都能选中整个单词
viw
如何复制一个单词,复制当前光标所在单词
yiw
在VIM中用iw或者aw表示一个单词，两者稍有区别。
a会选择一个对象（an object）包括空格在内，而i只会选择一个对象的内部（an inner object）不包含空格。**
下面就是一些命令含义：
aw   a word
iw   inner word
************************************
整行移动(:m)和拷贝(:co) 
更多帮助可以查看:h :move和:h copy。
今天要讲的是整行移动和拷贝，涉及的命令是:m和t。这两个命令其实是move和copy的简写形式。 
:copy和:move命令可以在任何地方拷贝或者移动任意一行或者多行。
copy命令格式：:[range]copy{address}，range表示拷贝范围，address表示目标地址。
我们可以用:1copy.把第一行拷贝到光标的下一行（.代表当前行），
如果三行全拷贝:1,3copy.
copy的另外两个写法:co或者:t。 常用命令：
:3co. 拷贝第三行到当前光标的下一行
:co3 拷贝当前行到第三行的下一行
:co. 拷贝当前行到光标的一下行，相当于Yp和yyp
:co$ 拷贝当前行到最后一行
3,5co10 拷贝3-5行到第10行下一行
:'<,'>co0 拷贝所选区域到文本的开头处，这里的操作步骤是：现在visual 模式下选中文本，然后输入:，接着co0。

move：move的操作完全和copy是一样的，它的简写格式有mo和m。
可以对照上面的例子重复操作一遍。
3,5mo10 移动3-5行到第10行下一行

替换(:s)
vim可以借用正则表达式来实现丰富的替换功能，她的基本语法是：
:[addr]s/源字符串/目的字符串/[option]，我们可以看出addr和option是可以缺省不填的，他们各个字段的意思是：
[addr]代表检索范围，缺省表示当前行 1，10 表示1到10行，%代表整个文件等价于1,$，而.,$代表当前行到文件末尾
s代表替换的意思
option代表操作类型，缺省只对第一个匹配的字符进行替换，g代表全局替换,c代表操作时确认，gc可以组合使用

以下提供几个例子.
:s/aa/bb/g         将光标所在行出现的所有包含 aa 的字符串中的 aa 替换为 bb
:%s/aa/bb/g      将文档中出现的所有包含 aa 的字符串中的 aa 替换为 bb
:12,23s/aa/bb/g  将从12行到23行中出现的所有包含 aa 的字符串中的 aa 替换为 bb
:%s/^/#/            全文的行首加入 # 字符,批量注释的时候非常有用
:%s= *$==        将所有行尾多余的空格删除
:g/^$/d          这里的g表示对文章中所有符合要求字符串执行替换操作，^表示行首,$表示行尾，整个意思是：将所有的空行删除.
:12,23s//bb/g         将从12行到23行中出现的,光标所在单词,替换为 bb

************************************

vim使用技巧——快速移动篇
1、    按屏幕移动
（1） 最常用的几个命令如下：
Ctrl + f                // 向前（往行号大的方向移动）移动一屏，想来F代表Forward
Ctrl  + b               // 向后移动一屏，B的话应该是Before吧
Ctrl + d               // 向前移动半屏，D指Down
Ctrl +  u               // 向后移动半屏，U指Up

Ctrl+e           //编辑窗口中的文件内容整体上移一行。
Ctrl+y           //编辑窗口中的文件内容整体下移一行。


注：上面是指按下Ctrl键的同时再按f等键。

（2） 使用z重新定位屏幕命令
z + 回车         // 把当前行移动到屏幕顶部
扩展下上命令如： 
100z + 回车      // 将移动第100行到屏幕的顶部，记得键入100z之后要再回车
z.                              // 把当前行移动到屏幕中央，不用回车，切记
z-                             // 把当前行移动到屏幕底部，同上，不用回车

3、    按行号移动
nG                         // 移动到第n行，注意此处G是大写。即输入n，在小写模式下输入shift+g，大写模式下直接按下g键
              （如100G则能快速定位到源程序中第100行代码位置处，想必是很有用的。）
Ctrl + g            // 显示当前行（并不是移动命令）
G                           // 移动到文件的尾部，在小写模式下输入shift+g，大写模式下直接按下g键

4、按光标移动

左：h
下：j
上：k
右：l

下一行行首：+         //shift键切换到上档 '+'
上一行行首：-
当前行行首：0

把光标移至当前行的起始位置，也即当前行的第一个非空白字符：^
当前行行尾：$

后一个单词词首：w,W    // w：将光标右移一个字。光标停留在下一个字的字首位置；W：将光标右移一个字。光标停留在下一个字的字首位置（即使两个字之间存在标点符号）。

后一个单词词尾：e,E      // e：把光标移至当前所在字（或下一个字）的最后一个字符位置；E:  同e，只是以空格字符作为字的分隔符。

前一个单词词首：b,B //b:将光标左移一个字。光标停留在下一个字的字首位置；B：将光标左移一个字。光标停留在下一个字的字首位置（即使两个字之间存在标点符号）。

当前屏幕首行：H
当前屏幕末行：L
当前屏幕中央：M




fx       //往右移动到 x 字符上                                                         
Fx       //往左移动到 x 字符上                                                         
tx       //往右移动到 x 字符前                                                         
Tx      //往左移动到 x 字符后                                                         
　        （注意：以上四个命令中，其中x是键入的字符）                                   
;         //分号，配合 f 和 t 使用，重复一次                                        
,         //逗号，配合 f 和 t 使用，反方向重复一次  
可以在命令前面使用数字，表示倍数。例如，”3fx“表示移动到光标右边的第3个’x'字符上。

标记文本替换
mqq    //用字符串qq来标记当前光标的位置
`qq      //移至qq所标记处  (数字1键左边键的上档)
'qq      //移至qq标记所在行的开头处（单引号）
''         //移至当前行上第一次所在位置的行的开头处（在光标移动之后，两个单引号）
"          //移至当前行上一次所在位置（在光标移动之后）——1个双引号（测试不通过）

使用 块选的好处：对于vim几乎提到的都是以行为单位的操作。果我想要搞定的是一个区块范围呢 v V [Ctrl]+v
v                                     字符选择，会将光标经过癿地方反白选择！
V(大写)                            行选择，会将光标经过癿行反白选择！（常用，配合上下左右键，进行区域选择，很爽！！！）
[Ctrl]+v                           区块选择，可以用长方形癿方式选择资料
y                                     将反白癿地方复制起来 
d                                     将反白癿地方删除掉



使用VIM经常会搜索或替换一个单词,或者过滤这个单词的行,或者只保留这个单词的行,等等,一般都是对当前文本里的单词进行操作.

比如有文本如下:
 
this is a thisisaverylongword text.
this is a thisisaverylongword text.
this is a thisisaverylongword text.
this is a thisisaverylongword text.
this is a thisisaverylongword text.

我们发下有一个很长的单词:thisisaverylongword

如果要搜索,一般命令是:   ":/thisisaverylongword"
但是这样输入thisisaverylongword, 这个很长的单词很难输入, 所以有更简单的办法:
 把光标置于thisisaverylongword之上, 然后按*键,或者#键即可直接进行搜索.
 *键是向下搜索, #键是向上搜索.

如果要替换, 就没有什么快捷键了. 
一般的做法是  :%s/thisisaverylongword/ABCD/g"
同样,这还是要输入thisisaverylongword, 更简单的办法应该是:把光标置于thisisaverylongword
之上, 然后
:%s//ABCD/g 即可.